// <auto-generated />
using System;
using AspNetCoreApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AspNetCoreApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250303150559_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AspNetCoreApp.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "simon.peter@example.com",
                            FirstName = "Simon",
                            JoinedDate = new DateTime(2025, 3, 3, 15, 5, 58, 653, DateTimeKind.Utc).AddTicks(8461),
                            LastName = "Peter"
                        },
                        new
                        {
                            Id = 2,
                            Email = "andrew@example.com",
                            FirstName = "Andrew",
                            JoinedDate = new DateTime(2025, 3, 3, 15, 5, 58, 653, DateTimeKind.Utc).AddTicks(8463),
                            LastName = ""
                        },
                        new
                        {
                            Id = 3,
                            Email = "james.zebedee@example.com",
                            FirstName = "James",
                            JoinedDate = new DateTime(2025, 3, 3, 15, 5, 58, 653, DateTimeKind.Utc).AddTicks(8464),
                            LastName = "son of Zebedee"
                        },
                        new
                        {
                            Id = 4,
                            Email = "john.zebedee@example.com",
                            FirstName = "John",
                            JoinedDate = new DateTime(2025, 3, 3, 15, 5, 58, 653, DateTimeKind.Utc).AddTicks(8465),
                            LastName = "son of Zebedee"
                        },
                        new
                        {
                            Id = 5,
                            Email = "philip@example.com",
                            FirstName = "Philip",
                            JoinedDate = new DateTime(2025, 3, 3, 15, 5, 58, 653, DateTimeKind.Utc).AddTicks(8466),
                            LastName = ""
                        },
                        new
                        {
                            Id = 6,
                            Email = "bartholomew@example.com",
                            FirstName = "Bartholomew",
                            JoinedDate = new DateTime(2025, 3, 3, 15, 5, 58, 653, DateTimeKind.Utc).AddTicks(8467),
                            LastName = ""
                        },
                        new
                        {
                            Id = 7,
                            Email = "thomas@example.com",
                            FirstName = "Thomas",
                            JoinedDate = new DateTime(2025, 3, 3, 15, 5, 58, 653, DateTimeKind.Utc).AddTicks(8468),
                            LastName = ""
                        },
                        new
                        {
                            Id = 8,
                            Email = "matthew.levi@example.com",
                            FirstName = "Matthew",
                            JoinedDate = new DateTime(2025, 3, 3, 15, 5, 58, 653, DateTimeKind.Utc).AddTicks(8468),
                            LastName = "Levi"
                        },
                        new
                        {
                            Id = 9,
                            Email = "james.alphaeus@example.com",
                            FirstName = "James",
                            JoinedDate = new DateTime(2025, 3, 3, 15, 5, 58, 653, DateTimeKind.Utc).AddTicks(8469),
                            LastName = "son of Alphaeus"
                        },
                        new
                        {
                            Id = 10,
                            Email = "thaddaeus@example.com",
                            FirstName = "Thaddaeus",
                            JoinedDate = new DateTime(2025, 3, 3, 15, 5, 58, 653, DateTimeKind.Utc).AddTicks(8470),
                            LastName = ""
                        },
                        new
                        {
                            Id = 11,
                            Email = "simon.zealot@example.com",
                            FirstName = "Simon",
                            JoinedDate = new DateTime(2025, 3, 3, 15, 5, 58, 653, DateTimeKind.Utc).AddTicks(8471),
                            LastName = "the Zealot"
                        },
                        new
                        {
                            Id = 12,
                            Email = "judas.iscariot@example.com",
                            FirstName = "Judas",
                            JoinedDate = new DateTime(2025, 3, 3, 15, 5, 58, 653, DateTimeKind.Utc).AddTicks(8472),
                            LastName = "Iscariot"
                        },
                        new
                        {
                            Id = 13,
                            Email = "matthias@example.com",
                            FirstName = "Matthias",
                            JoinedDate = new DateTime(2025, 3, 3, 15, 5, 58, 653, DateTimeKind.Utc).AddTicks(8473),
                            LastName = ""
                        },
                        new
                        {
                            Id = 14,
                            Email = "paul@example.com",
                            FirstName = "Paul",
                            JoinedDate = new DateTime(2025, 3, 3, 15, 5, 58, 653, DateTimeKind.Utc).AddTicks(8474),
                            LastName = ""
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
