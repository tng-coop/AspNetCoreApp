@using BlazorWebApp.Models
@using BlazorWebApp.Services
@using Microsoft.Extensions.Localization
@implements IDisposable
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject ITreeMenuService    TreeMenuService
@inject IStringLocalizer<NavMenu> L

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlazorWebApp</a>
    </div>
</div>

<input
    type="checkbox"
    title='@L["Navigation menu"]'
    class="navbar-toggler"
    @bind="isMenuOpen" />

<div class="nav-scrollable" @onclick="CollapseMenu">
    <nav class="nav flex-column">


        <!-- CMS tree (always visible) -->
        <div class="nav-item px-3">
            @if (treeItems is null)
            {
                <em>@L["Loadingâ€¦"]</em>
            }
            else
            {
        <TreeMenu Items="treeItems" />
        }
    </div>

        <!-- Dashboard (only for logged-in users) -->
        <AuthorizeView>
          <Authorized>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> @L["Dashboard"]
                </NavLink>
            </div>
          </Authorized>
        </AuthorizeView>

        <!-- Publication links (only for logged-in users) -->
        <AuthorizeView>
          <Authorized>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="_cms/publications" Match="NavLinkMatch.All">
                    <span class="bi bi-book"></span> @L["Publications"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="_cms/editor">
                    <span class="bi bi-plus-circle"></span> @L["New Publication"]
                </NavLink>
            </div>
          </Authorized>
        </AuthorizeView>

        <!-- Account links -->
        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span>
                        @context.User.Identity?.Name
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> @L["Logout"]
                        </button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> @L["Register"]
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> @L["Login"]
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>

    </nav>
</div>

@code {
    private string? currentUrl;
    private List<MenuItemDto>? treeItems;
    private bool isMenuOpen;

    protected override async Task OnInitializedAsync()
    {
        treeItems = await TreeMenuService.GetMenuAsync();
    }

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    private Task CollapseMenu(MouseEventArgs _)
    {
        // Un-check the hamburger to collapse on mobile
        isMenuOpen = false;
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
