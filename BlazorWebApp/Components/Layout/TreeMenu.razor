@using System.Text.Json
@using BlazorWebApp.Models
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JS

<ul class="nav flex-column tree-menu">
  @foreach (var item in Items)
  {
    <li class="nav-item py-0 px-0" @key="item.Slug">
      <div class="d-flex align-items-center">

        @if (item.Children?.Any() == true)
        {
          <button type="button"
                  class="btn btn-sm p-0 me-1"
                  @onclick:stopPropagation
                  @onclick="() => OnChevronClick(item)"
                  aria-label="Toggle">
            @if (IsExpanded(item.Slug))
            {
              <!-- chevron-down -->
              <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em"
                   fill="white" class="bi bi-chevron-down" viewBox="0 0 16 16">
                <path fill-rule="evenodd"
                      d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
              </svg>
            }
            else
            {
              <!-- chevron-right -->
              <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em"
                   fill="white" class="bi bi-chevron-right" viewBox="0 0 16 16">
                <path fill-rule="evenodd"
                      d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708
                         l-6 6a.5.5 0 1 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
              </svg>
            }
          </button>
        }

        <NavLink class="nav-link flex-grow-1 px-0"
                 style="height:auto; line-height:2;"
                 href="@($"/_cms/{item.Slug}")"
                 Match="NavLinkMatch.All">
          @if (!string.IsNullOrEmpty(item.IconCss))
          {
            <i class="bi bi-@item.IconCss me-1"></i>
          }
          @item.Title
        </NavLink>
      </div>

      @if (item.Children?.Any() == true && IsExpanded(item.Slug))
      {
        <ul class="nav flex-column ps-2">
          <TreeMenu Items="item.Children" />
        </ul>
      }
    </li>
  }
</ul>

@code {
  [Parameter] public List<MenuItemDto> Items { get; set; } = new();
  private HashSet<string> _expanded = new();
  private const string StorageKey = "treeMenuExpanded";

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      var json = await JS.InvokeAsync<string>("localStorage.getItem", StorageKey);
      if (!string.IsNullOrEmpty(json))
      {
        var saved = JsonSerializer.Deserialize<List<string>>(json)!;
        _expanded = new HashSet<string>(saved);
        StateHasChanged();
      }
    }
  }

  private Task OnChevronClick(MenuItemDto item) => ToggleAsync(item);

  private async Task ToggleAsync(MenuItemDto item)
  {
    var slug = item.Slug;
    if (_expanded.Contains(slug))
    {
      _expanded.Remove(slug);
      RemoveDescendants(item);
    }
    else
    {
      _expanded.Add(slug);
    }

    var toStore = JsonSerializer.Serialize(_expanded.ToList());
    await JS.InvokeVoidAsync("localStorage.setItem", StorageKey, toStore);
  }

  private void RemoveDescendants(MenuItemDto item)
  {
    if (item.Children == null) return;
    foreach (var child in item.Children)
    {
      _expanded.Remove(child.Slug);
      RemoveDescendants(child);
    }
  }

  private bool IsExpanded(string slug) => _expanded.Contains(slug);
}
