@rendermode InteractiveServer
@using BlazorWebApp.Services
@implements IDisposable
@inject LocalizationService Localization

<div class="dropdown" style="position: relative;">
    <button class="btn btn-secondary dropdown-toggle" @onclick="ToggleDropdown">
        üåê @(Localization.CurrentCulture.Name == "en" ? "EN" : "JA")
    </button>
    <ul class="dropdown-menu @(isDropdownOpen ? "show" : "")"
        style="position: absolute; top: 100%; left: 0;">
        <li>
            <a class="dropdown-item @(Localization.CurrentCulture.Name == "en" ? "active" : "")"
               href="#" @onclick="@(() => SetLanguage("en"))" @onclick:preventDefault>
                English @(Localization.CurrentCulture.Name == "en" ? "‚úîÔ∏è" : "")
            </a>
        </li>
        <li>
            <a class="dropdown-item @(Localization.CurrentCulture.Name == "ja" ? "active" : "")"
               href="#" @onclick="@(() => SetLanguage("ja"))" @onclick:preventDefault>
                Êó•Êú¨Ë™û @(Localization.CurrentCulture.Name == "ja" ? "‚úîÔ∏è" : "")
            </a>
        </li>
    </ul>
</div>

@code {
    private bool isDropdownOpen = false;

    protected override void OnInitialized()
    {
        Localization.OnChange += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Localization.InitializeAsync();
            StateHasChanged();
        }
    }

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }

    private async Task SetLanguage(string culture)
    {
        isDropdownOpen = false;
        await Localization.SetCultureAsync(culture);
    }

    public void Dispose()
    {
        Localization.OnChange -= StateHasChanged;
    }
}
