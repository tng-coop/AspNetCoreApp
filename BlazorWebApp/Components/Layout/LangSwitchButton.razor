@using BlazorWebApp.Services
@implements IDisposable
@inject LocalizationService Localization
@rendermode InteractiveServer


<div class="dropdown">
    <button class="btn btn-secondary dropdown-toggle" @onclick="ToggleDropdown">
        üåê @GetCurrentCultureLabel()
    </button>
    <ul class="dropdown-menu @(GetDropdownMenuClass())">
        <li>
            <button class="dropdown-item @(GetActiveClass("en"))" @onclick="@(() => SetLanguage("en"))">
                English @GetCheckmark("en")
            </button>
        </li>
        <li>
            <button class="dropdown-item @(GetActiveClass("ja"))" @onclick="@(() => SetLanguage("ja"))">
                Êó•Êú¨Ë™û @GetCheckmark("ja")
            </button>
        </li>
    </ul>
</div>

@code {
    private bool isDropdownOpen;

    protected override void OnInitialized()
    {
        Localization.OnChange += StateHasChanged;
    }

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }

    private async Task SetLanguage(string culture)
    {
        isDropdownOpen = false;
        await Localization.SetCultureAsync(culture);
    }

    private string GetCurrentCultureLabel()
    {
        if (Localization.CurrentCulture.Name == "en")
            return "EN";
        return "JA";
    }

    private string GetDropdownMenuClass()
    {
        if (isDropdownOpen)
            return "show";
        return string.Empty;
    }

    private string GetActiveClass(string culture)
    {
        if (Localization.CurrentCulture.Name == culture)
            return "active";
        return string.Empty;
    }

    private string GetCheckmark(string culture)
    {
        if (Localization.CurrentCulture.Name == culture)
            return "‚úîÔ∏è";
        return string.Empty;
    }

    public void Dispose()
    {
        Localization.OnChange -= StateHasChanged;
    }
}