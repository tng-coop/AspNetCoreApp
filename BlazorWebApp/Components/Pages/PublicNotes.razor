@page "/notes"
@rendermode InteractiveServer 
@using System.Security.Claims
@using BlazorWebApp.Data
@using BlazorWebApp.Models
@using BlazorWebApp.Services

@inject INoteService              NoteService
@inject NavigationManager         Nav
@inject ILogger<PublicNotes>      Logger
@inject AuthenticationStateProvider AuthStateProvider

<h1>My Notes</h1>

<EditForm Model="_newNote"
          OnValidSubmit="Create"
          FormName="PublicNotesForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Title</label>
        <input class="form-control"
               @bind="_newNote.Title"
               @bind:event="oninput" />
        <ValidationMessage For="@(() => _newNote.Title)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Content</label>
        <textarea class="form-control"
                  rows="5"
                  @bind="_newNote.Content"
                  @bind:event="oninput">
        </textarea>
        <ValidationMessage For="@(() => _newNote.Content)" />
    </div>

    <div class="form-check mb-3">
        <input type="checkbox"
               class="form-check-input"
               @bind="_newNote.IsPublic" />
        <label class="form-check-label">Public?</label>
    </div>

    <button type="submit" class="btn btn-primary">Share</button>
</EditForm>

<hr />

@if (_notes is null)
{
    <p><em>Loadingâ€¦</em></p>
}
else if (!_notes.Any())
{
    <p><em>No notes yet.</em></p>
}
else
{
    <ul class="list-unstyled">
    @foreach (var note in _notes)
    {
        <li class="mb-2">
            <NavLink href=$"/notes/{note.Id}"><strong>@note.Title</strong></NavLink>
            <br />
            <small class="text-muted">
              @note.CreatedAt.ToLocalTime():g
              @if (!note.IsPublic) { <em>(private)</em> }
            </small>
            <p>@note.Content</p>
        </li>
    }
    </ul>
}

@code {
    private List<Note>?   _notes;
    private NoteWriteDto  _newNote = new();
    private string?       _ownerId;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Loading notes");
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        _ownerId = auth.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        _notes = await NoteService.GetPublicNotesAsync(_ownerId);
        Logger.LogInformation("Loaded {Count} notes", _notes.Count);
    }

    private async Task Create()
    {
        Logger.LogInformation("Create() called with Title='{Title}', ContentLen={Len}",
                              _newNote.Title, _newNote.Content?.Length);

        var id = await NoteService.CreateNoteAsync(
            _newNote.Title,
            _newNote.Content!,
            _newNote.IsPublic,
            _ownerId
        );

        Logger.LogInformation("Saved new note {Id}", id);

        _notes = await NoteService.GetPublicNotesAsync(_ownerId);
        _newNote = new();
    }
}
