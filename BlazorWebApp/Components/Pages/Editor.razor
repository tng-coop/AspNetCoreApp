@page "/editor/{Id:guid?}"
@rendermode InteractiveServer

@using BlazorWebApp.Models
@using BlazorWebApp.Services
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject IPublicationService PublicationService

<h3>@(Id == null ? "New Publication" : "Edit Publication")</h3>

<EditForm EditContext="editContext" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Title</label>
        <InputText class="form-control" @bind-Value="dto.Title" />
        <ValidationMessage For="() => dto.Title" />
    </div>

    <div class="mb-3">
        <label class="form-label">Content</label>
        <div id="editor" style="height:300px; background:white;"></div>
    </div>

    <button type="submit" class="btn btn-primary">Save Draft</button>
    <button type="button" class="btn btn-success ms-2" @onclick="PublishAsync" disabled="@(!canPublish)">Publish</button>
</EditForm>

@code {
    [Parameter] public Guid? Id { get; set; }

    private PublicationWriteDto dto = new();
    private EditContext editContext;
    private IJSObjectReference? module;
    private bool canPublish => !string.IsNullOrWhiteSpace(dto.Title) && !string.IsNullOrWhiteSpace(dto.DeltaJson);

    protected override void OnInitialized()
    {
        editContext = new EditContext(dto);
    }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (!first) return;

        module ??= await JS.InvokeAsync<IJSObjectReference>("import", "/js/quillInterop.js");
        await module.InvokeVoidAsync("initializeQuill", "#editor");

        if (Id.HasValue)
        {
            var existing = await PublicationService.GetAsync(Id.Value);
            if (existing != null)
            {
                dto.Title     = existing.Title;
                dto.DeltaJson = existing.DeltaJson;
                dto.Html      = existing.Html;
                // use the correct interop method name from quillInterop.js
                await module.InvokeVoidAsync("setContents", existing.DeltaJson);
                editContext.NotifyValidationStateChanged();
                StateHasChanged();
            }
        }
    }

    private async Task HandleSubmit(EditContext context)
    {
        // Pull Quill content before validation using correct interop names
        dto.DeltaJson = await module!.InvokeAsync<string>("getDeltaJson");
        dto.Html      = await module.InvokeAsync<string>("getHtml");

        // Re-validate now that DeltaJson is populated
        if (!context.Validate())
            return;

        // Save draft
        if (Id.HasValue)
        {
            await PublicationService.UpdateAsync(Id.Value, dto);
        }
        else
        {
            var created = await PublicationService.CreateAsync(dto);
            Id = created.Id;
        }

        // After save, allow publishing
    }

    private async Task PublishAsync()
    {
        // Ensure draft is saved and valid
        await HandleSubmit(editContext);
        if (Id.HasValue)
        {
            await PublicationService.PublishAsync(Id.Value);
            Nav.NavigateTo($"/publications/{Id}");
        }
    }
}
