@page "/editor"
@page "/editor/{Id:guid}"
@rendermode InteractiveServer

@using TinyMCE.Blazor
@using BlazorWebApp.Models
@using BlazorWebApp.Services
@using Microsoft.AspNetCore.Components.Forms

@inject IPublicationService PublicationService
@inject ICategoryService    CategoryService
@inject NavigationManager   Nav

<h3>
  @(Id == null
      ? "New Publication"
      : (loadedExisting
          ? "Edit Publication"
          : "Unknown Publication – creating new"))
</h3>

<EditForm EditContext="editContext"
          OnValidSubmit="HandleSubmit">
  <DataAnnotationsValidator />
  <ValidationSummary />

  <!-- Category -->
  <div class="mb-3">
    <label class="form-label">Category</label>
    <InputSelect class="form-select" @bind-Value="dto.CategoryId">
      <option value="">-- None --</option>
      @foreach (var cat in categories)
      {
        <option value="@cat.Id">@cat.Name</option>
      }
    </InputSelect>
    <ValidationMessage For="@(() => dto.CategoryId)" />
  </div>

  <!-- Title -->
  <div class="mb-3">
    <label class="form-label">Title</label>
    <InputText class="form-control" @bind-Value="dto.Title" />
    <ValidationMessage For="@(() => dto.Title)" />
  </div>

  <!-- TinyMCE Editor -->
  <div class="mb-3">
    <label class="form-label">Content</label>
    <TinyMCE.Blazor.Editor
      ApiKey="no-api-key"
      Id="editor"
      @bind-Value="dto.Html"
      Field="@(() => dto.Html)"
      Conf="editorConfig" />
    <ValidationMessage For="@(() => dto.Html)" />
  </div>

  <!-- Buttons -->
  <button type="submit" class="btn btn-primary">Save Draft</button>
  <button type="button"
          class="btn btn-success ms-2"
          @onclick="PublishAsync"
          disabled="@( !canPublish )">
    Publish
  </button>
</EditForm>

@code {
  [Parameter] public Guid? Id { get; set; }

  private PublicationWriteDto dto = new();
  private List<CategoryDto> categories = new();
  private EditContext editContext = default!;  // satisfy nullable analysis
  private bool loadedExisting;

  // Can publish only if title and content are non-empty
  private bool canPublish =>
    !string.IsNullOrWhiteSpace(dto.Title) &&
    !string.IsNullOrWhiteSpace(dto.Html);

  // TinyMCE configuration dictionary
// TinyMCE configuration dictionary—with table support enabled
private Dictionary<string, object> editorConfig = new()
{
    { "height", 300 },
    // enable the menubar (so Insert → Table shows up)
    { "menubar", "file edit view insert format tools table help" },

    // include the table plugin
    { "plugins", new[]
        {
            "link",
            "lists",
            "code",
            "image",
            "paste",
            "table"
        }
    },

    // add the table button to the toolbar
    { "toolbar",  
        "undo redo | bold italic underline | alignleft aligncenter | " +
        "bullist numlist | link image | table | code"
    },

    // optional: floating toolbar for row/col operations
    { "table_toolbar",
        "tableprops tabledelete | tableinsertrowbefore tableinsertrowafter | " +
        "tableinsertcolbefore tableinsertcolafter"
    },

    // your existing upload & branding settings
    { "images_upload_url", "/api/images/upload" },
    { "automatic_uploads", true },
    { "paste_data_images", false },
    { "branding", false }
};

  protected override async Task OnInitializedAsync()
  {
    // Initialize EditContext
    editContext = new EditContext(dto);

    // Load categories
    categories = await CategoryService.ListAsync();

    // If editing an existing publication, load its data
    if (Id.HasValue)
    {
      var existing = await PublicationService.GetAsync(Id.Value);
      if (existing != null)
      {
        loadedExisting = true;
        dto.CategoryId = existing.CategoryId;
        dto.Title      = existing.Title;
        dto.Html       = existing.Html;
      }
    }
  }

  private async Task HandleSubmit()
  {
    // At this point the form has already been validated for data annotations
    if (loadedExisting && Id.HasValue)
    {
      await PublicationService.UpdateAsync(Id.Value, dto);
    }
    else
    {
      var created = await PublicationService.CreateAsync(dto);
      Id = created.Id;
      loadedExisting = true;
      Nav.NavigateTo($"/editor/{Id}", replace: true);
    }
  }

  private async Task PublishAsync()
  {
    // Ensure we save first (form is valid)
    await HandleSubmit();

    if (loadedExisting && Id.HasValue)
    {
      await PublicationService.PublishAsync(Id.Value);
      Nav.NavigateTo($"/publications/{Id}");
    }
  }
}
