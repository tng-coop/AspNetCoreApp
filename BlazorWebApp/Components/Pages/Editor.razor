@page "/_cms/_editor"
@page "/_cms/_editor/{Id:guid}"
@page "/{Tenant}/_cms/_editor"
@page "/{Tenant}/_cms/_editor/{Id:guid}"
@rendermode InteractiveServer
@inherits BlazorWebApp.Components.Shared.LocalizedComponentBase
@inject Microsoft.Extensions.Localization.IStringLocalizer<Editor> L

@using TinyMCE.Blazor
@using BlazorWebApp.Models
@using BlazorWebApp.Services
@using BlazorWebApp.Data
@using Microsoft.AspNetCore.Components.Forms

@inject IPublicationService PublicationService
@inject ICategoryService    CategoryService
@inject ICalendarEventService CalendarEventService
@inject NavigationManager   Nav
@inject HttpClient         Http

<h3>
  @(Id == null
      ? L["New Publication"].Value
      : (loadedExisting
          ? L["Edit Publication"].Value
          : L["Unknown Publication – creating new"].Value))
</h3>

<EditForm EditContext="editContext"
          OnValidSubmit="HandleSubmit">
  <DataAnnotationsValidator />
  <ValidationSummary />

  <!-- Category -->
  <div class="mb-3">
    <label class="form-label">@L["Category"]</label>
    <InputSelect class="form-select" @bind-Value="dto.CategoryId">
      @foreach (var opt in categoryOptions)
      {
        <option value="@opt.Id">@opt.DisplayName</option>
      }
    </InputSelect>
    <ValidationMessage For="@(() => dto.CategoryId)" />
  </div>

  <!-- Title -->
  <div class="mb-3">
    <label class="form-label">@L["Title"]</label>
    <InputText class="form-control" @bind-Value="dto.Title" @oninput="TitleChanged" />
    <ValidationMessage For="@(() => dto.Title)" />
  </div>

  <!-- Title (JA) -->
  <div class="mb-3">
    <label class="form-label">@L["Title (JA)"]</label>
    <InputText class="form-control" @bind-Value="dto.TitleJa" />
  </div>

  <!-- Slug -->
  <div class="mb-3">
    <label class="form-label">@L["Slug"]</label>
    <InputText class="form-control" @bind-Value="dto.Slug" />
    @if (!slugAscii)
    {
        <div class="text-warning"><small>@L["Slug should contain ASCII characters only."]</small></div>
    }
  </div>

  <!-- Featured Order -->
  <div class="mb-3">
    <label class="form-label" for="featuredOrder">@L["Featured Order"]</label>
    <InputNumber class="form-control" @bind-Value="dto.FeaturedOrder" id="featuredOrder" />
  </div>

  <!-- Content Mode -->
  <div class="mb-3">
    <label class="form-label">@L["Content Type"]</label>
    <InputSelect class="form-select" @bind-Value="dto.Mode">
      <option value="@PublicationContentMode.Html">HTML</option>
      <option value="@PublicationContentMode.Pdf">PDF</option>
    </InputSelect>
  </div>

  @if (dto.Mode == PublicationContentMode.Html)
  {
    <!-- TinyMCE Editor -->
    <div class="mb-3">
      <label class="form-label">@L["Content"]</label>
      <TinyMCE.Blazor.Editor
        @key="editorKey"
        ApiKey="no-api-key"
        @bind-Value="dto.Html"
        Field="@(() => dto.Html)"
        Conf="@editorConfig" />
      <ValidationMessage For="@(() => dto.Html)" />
    </div>
  }
  else
  {
    <div class="mb-3">
      <label class="form-label">PDF</label>
      <InputFile OnChange="UploadPdf" class="form-control" accept="application/pdf" />
      @if (uploadInProgress)
      {
        <MudProgressLinear Indeterminate="true" Class="mt-2" />
      }
    </div>
  }

  <!-- Buttons -->
  <button type="submit" class="btn btn-primary">@L["Save Draft"]</button>
  <AuthorizeView Roles="Admin">
    <Authorized Context="authState">
      <button type="button"
              class="btn btn-success ms-2"
              @onclick="PublishAsync"
              disabled="@(!canPublish)">
        @L["Publish"]
      </button>
    </Authorized>
    <NotAuthorized Context="authState">
      <button type="button" class="btn btn-success ms-2" disabled>
        Publish
      </button>
    </NotAuthorized>
  </AuthorizeView>
</EditForm>

@if (loadedExisting)
{
  <h4 class="mt-5">@L["Calendar Events"]</h4>
  @if (eventRows == null)
  {
    <p>@L["Loading events…"]</p>
  }
  else
  {
    <table class="table table-sm align-middle">
      <thead>
        <tr>
          <th>@L["Start"]</th>
          <th>@L["End"]</th>
          <th class="text-center">@L["All Day"]</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        @foreach (var row in eventRows)
        {
          <tr>
            <td>
              <input type="datetime-local" class="form-control"
                     @bind-value="row.Dto.Start" />
            </td>
            <td>
              <input type="datetime-local" class="form-control"
                     @bind-value="row.Dto.End" />
            </td>
            <td class="text-center">
              <input type="checkbox" class="form-check-input" @bind="row.Dto.AllDay" />
            </td>
            <td>
              <div class="btn-group">
                <button type="button" class="btn btn-sm btn-secondary" @onclick="() => SaveEvent(row)">@L["Save"]</button>
                <button type="button" class="btn btn-sm btn-danger" @onclick="() => DeleteEvent(row)">@L["Delete"]</button>
              </div>
            </td>
          </tr>
        }
      </tbody>
    </table>
    <button type="button" class="btn btn-outline-primary" @onclick="AddEvent">@L["Add Event"]</button>
  }
}


@if (loadedExisting)
{
  <h4 class="mt-5">@L["Revision History"]</h4>
  @if (revisions == null)
  {
    <p>@L["Loading revisions…"]</p>
  }
  else if (!revisions.Any())
  {
    <p><em>@L["No past revisions."]</em></p>
  }
  else
  {
    <table class="table table-striped">
      <thead>
        <tr><th>@L["When"]</th><th>@L["Title"]</th><th></th></tr>
      </thead>
      <tbody>
        @foreach (var r in revisions)
        {
          <tr>
            <td>@r.CreatedAt.ToString("g")</td>
            <td>@r.Title</td>
            <td>
              <button class="btn btn-sm btn-outline-secondary"
                      @onclick="() => Restore(r.Id)">
                @L["Restore"]
              </button>
            </td>
          </tr>
        }
      </tbody>
    </table>
  }
}
