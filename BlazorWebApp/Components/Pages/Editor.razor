@page "/editor"
@rendermode InteractiveServer

@using Microsoft.JSInterop
@inject IJSRuntime JS

<h3>Quill Editor Test</h3>

<div class="form-group">
    <label for="editor">Content</label>
    <div id="editor" style="height:200px;background-color:white;"></div>
</div>

<button class="btn btn-primary" @onclick="ShowContentSize">
    Show Content Size
</button>

@if (contentSize >= 0)
{
    <div class="mt-2">
        <strong>Content length:</strong> @contentSize characters
    </div>
}

@code {
    private int contentSize = -1;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        var loader = @"
(function() {
    var head = document.head;
    function loadCSS(href) {
        var link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = href;
        head.appendChild(link);
    }
    function loadScript(src) {
        return new Promise(function(resolve, reject) {
            var script = document.createElement('script');
            script.src = src;
            script.onload = resolve;
            script.onerror = reject;
            head.appendChild(script);
        });
    }
    loadCSS('https://cdn.quilljs.com/1.3.6/quill.snow.css');
    return loadScript('https://cdn.quilljs.com/1.3.6/quill.min.js');
})()
.then(function() {
    window.quill = new Quill('#editor', {
        theme: 'snow',
        modules: {
            toolbar: [
                [{ header: [1, 2, 3, false] }],
                ['bold', 'italic', 'underline', 'strike'],
                ['blockquote', 'code-block'],
                [{ list: 'ordered' }, { list: 'bullet' }],
                ['link', 'image', 'video'],
                ['clean']
            ]
        },
        placeholder: 'Type here...'
    });
})
.catch(function(err) { console.error('Failed to load Quill assets:', err); });
";

        await JS.InvokeVoidAsync("eval", loader);
    }

    private async Task ShowContentSize()
    {
        contentSize = await JS.InvokeAsync<int>("eval", "window.quill.getText().trim().length");
        StateHasChanged();
    }
}
