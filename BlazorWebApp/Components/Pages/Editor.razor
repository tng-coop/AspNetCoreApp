@page "/editor/{Id:guid?}"
@using BlazorWebApp.Models
@using System.Net.Http.Json
@inject IJSRuntime JS
@inject HttpClient Http

<h3>@(Id == null ? "New Post" : "Edit Post")</h3>
<input class="form-control mb-2" placeholder="Title" @bind="dto.Title" />

<div id="editor" style="height:300px; background:#fff;"></div>

<button class="btn btn-primary" @onclick="Save">Save Draft</button>
<button class="btn btn-success ms-2" @onclick="Publish" disabled="@(!canPublish)">Publish</button>

@code {
    [Parameter] public Guid? Id { get; set; }
    private PublicationWriteDto dto = new();
    private IJSObjectReference? mod;
    private bool canPublish => !string.IsNullOrWhiteSpace(dto.Title) && dto.DeltaJson != null;

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            mod = await JS.InvokeAsync<IJSObjectReference>("import", "./js/quillInterop.js");
            await mod.InvokeVoidAsync("initializeQuill", "#editor");
            if (Id.HasValue)
            {
                var existing = await Http.GetFromJsonAsync<PublicationReadDto>($"api/publications/{Id}");
                if (existing is not null)
                {
                    dto.Title = existing.Title;
                    // assume quillInterop.js has setContents extension
                    await mod.InvokeVoidAsync("setContents", existing.DeltaJson);
                }
            }
        }
    }

    private async Task Save()
    {
        dto.DeltaJson = await mod!.InvokeAsync<string>("getDeltaJson");
        await Http.PostAsJsonAsync("api/publications", dto);
    }

    private async Task Publish()
    {
        await Save();
        await Http.PostAsync($"api/publications/{Id}/publish", null);
    }
}
