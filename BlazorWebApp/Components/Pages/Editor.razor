@page "/editor/{Id:guid?}"
@rendermode InteractiveServer

@using BlazorWebApp.Models
@using BlazorWebApp.Services
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject IPublicationService PublicationService
@inject ICategoryService CategoryService

<h3>@(Id == null ? "New Publication" : (loadedExisting ? "Edit Publication" : "Unknown Publication â€“ creating new"))</h3>

<EditForm EditContext="editContext" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Category</label>
        <InputSelect class="form-select" @bind-Value="dto.CategoryId">
            <option value="">-- None --</option>
            @foreach (var cat in categories)
            {
                <option value="@cat.Id">@cat.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => dto.CategoryId)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Title</label>
        <InputText class="form-control" @bind-Value="dto.Title" />
        <ValidationMessage For="@(() => dto.Title)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Content</label>
        <div id="editor" style="height:300px; background:white;"></div>
    </div>

    <button type="submit" class="btn btn-primary">Save Draft</button>
    <button type="button"
            class="btn btn-success ms-2"
            @onclick="PublishAsync"
            disabled="@(!canPublish)">
        Publish
    </button>
</EditForm>

@code {
    [Parameter] public Guid? Id { get; set; }

    private PublicationWriteDto dto = new();
    private List<CategoryDto> categories = new();
    private EditContext editContext = null!;
    private IJSObjectReference module = null!;
    private bool loadedExisting;
    private bool canPublish =>
        !string.IsNullOrWhiteSpace(dto.Title) &&
        !string.IsNullOrWhiteSpace(dto.DeltaJson);

    protected override void OnInitialized()
    {
        editContext = new EditContext(dto);
        _ = LoadCategories();
    }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (!first) return;

        module ??= await JS.InvokeAsync<IJSObjectReference>("import", "/js/quillInterop.js");
        await module.InvokeVoidAsync("initializeQuill", "#editor");

        if (Id.HasValue)
        {
            var existing = await PublicationService.GetAsync(Id.Value);
            if (existing != null)
            {
                loadedExisting = true;
                dto.Title = existing.Title;
                dto.DeltaJson = existing.DeltaJson;
                dto.Html = existing.Html;
                await module.InvokeVoidAsync("setContents", existing.DeltaJson);
                editContext.NotifyValidationStateChanged();
                StateHasChanged();
            }
        }
    }

    private async Task HandleSubmit(EditContext context)
    {
        // pull from Quill
        dto.DeltaJson = await module.InvokeAsync<string>("getDeltaJson");
        dto.Html = await module.InvokeAsync<string>("getHtml");

        if (!context.Validate())
            return;

        if (loadedExisting && Id.HasValue)
        {
            await PublicationService.UpdateAsync(Id.Value, dto);
        }
        else
        {
            var created = await PublicationService.CreateAsync(dto);
            Id = created.Id;
            loadedExisting = true;
            Nav.NavigateTo($"/editor/{Id}", replace: true);
        }
    }

    private async Task PublishAsync()
    {
        await HandleSubmit(editContext);
        if (loadedExisting && Id.HasValue)
        {
            await PublicationService.PublishAsync(Id.Value);
            Nav.NavigateTo($"/publications/{Id}");
        }
    }

    private async Task LoadCategories()
    {
        categories = await CategoryService.ListAsync();
        StateHasChanged();
    }
}
