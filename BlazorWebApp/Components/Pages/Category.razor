@page "/_cms/{Slug}"
@using BlazorWebApp.Models
@using BlazorWebApp.Services
@inject ICategoryService CategoryService
@inject IPublicationService PublicationService

@if (category == null)
{
    <h2>Category not found</h2>
}
else
{
    <h1>@category.Name</h1>

    @if (subcats.Any())
    {
        <h4>Sub-categories</h4>
        <ul class="list-inline">
            @foreach (var sub in subcats)
            {
                <li class="list-inline-item">
                    <NavLink class="btn btn-outline-primary btn-sm"
                             href="@($"/_cms/{sub.Slug}")"
                             Match="NavLinkMatch.Prefix">
                        @sub.Name
                    </NavLink>
                </li>
            }
        </ul>
    }

    @if (featured.Any())
    {
        @foreach (var p in featured)
        {
            <article class="mb-4">
                <h5>
                    <NavLink href="@($"/_cms/{Slug}/{p.Slug}")" Match="NavLinkMatch.Prefix">
                        @p.Title
                    </NavLink>
                </h5>
                <small class="text-muted">@p.PublishedAt?.ToString("f")</small>
                <div class="mt-3 mce-content-body">
                    @((MarkupString)GetFirstParagraph(p.Html))
                </div>
            </article>
        }
    }

    <h4>Articles</h4>
    @if (!featured.Any() && !posts.Any())
    {
        <p><em>No published articles in this category.</em></p>
    }
    else
    {
        <!-- 1) Full display of the most‐recent -->
        @if (posts.Count > 0)
        {
            var firstPost = posts[0];
            <article>
                <h5>
                    <NavLink href="@($"/_cms/{Slug}/{firstPost.Slug}")" Match="NavLinkMatch.Prefix">
                        @firstPost.Title
                    </NavLink>
                </h5>
                <small class="text-muted">@firstPost.PublishedAt?.ToString("f")</small>
                <div class="mt-3 mce-content-body">
                    @((MarkupString)firstPost.Html)
                </div>
            </article>
        }

        <!-- 2) List the rest by title/date -->
        @if (posts.Count > 1)
        {
            <ul class="list-unstyled">
                @for (int i = 1; i < posts.Count; i++)
                {
                    var p = posts[i];
                    <li class="mb-2">
                        <NavLink href="@($"/_cms/{Slug}/{p.Slug}")" Match="NavLinkMatch.Prefix">
                            <strong>@p.Title</strong>
                        </NavLink>
                        <small class="text-muted ms-2">@p.PublishedAt?.ToString("g")</small>
                    </li>
                }
            </ul>
        }
    }
}

@code {
    [Parameter] public string Slug { get; set; } = string.Empty;

    private CategoryDto? category;
    private List<CategoryDto> subcats = new();
    private List<PublicationReadDto> posts = new();
            private List<PublicationReadDto> featured = new();

    protected override async Task OnParametersSetAsync()
    {
        var allCats = await CategoryService.ListAsync();
        category = allCats.FirstOrDefault(c => c.Slug == Slug);
        if (category == null)
            return;

        subcats = allCats
            .Where(c => c.ParentCategoryId == category.Id)
            .ToList();

        // 1) load featured posts for this category
        featured = await PublicationService.ListFeaturedInCategoryAsync(category.Id);

        // 2) load all published posts in this category
        var all = (await PublicationService.ListAsync())
                    .Where(p => p.CategoryId == category.Id
                                && p.Status == "Published")
                    .OrderByDescending(p => p.PublishedAt)
                    .ToList();

        // 3) the rest are those not already featured
        posts = all
                .Where(p => !featured.Any(f => f.Id == p.Id))
                .ToList();
    }

    private string GetFirstParagraph(string html)
    {
        if (string.IsNullOrEmpty(html))
            return string.Empty;

        var end = html.IndexOf("</p>", StringComparison.OrdinalIgnoreCase);
        if (end != -1)
            return html.Substring(0, end + 4);

        return html;
    }
}
