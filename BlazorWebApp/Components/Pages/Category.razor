@page "/_cms/{Slug}"
@page "/{Tenant}/_cms/{Slug}"
@using BlazorWebApp.Models
@using BlazorWebApp.Services
@using BlazorWebApp.Utils
@inject ICategoryService CategoryService
@inject IPublicationService PublicationService

@if (category == null)
{
    <h2>Category not found</h2>
}
else
{
    <h1>@category.Name</h1>

    @if (subcats.Any())
    {
        <h4>Sub-categories</h4>
        <ul class="list-inline">
            @foreach (var sub in subcats)
            {
                <li class="list-inline-item">
                    <NavLink class="btn btn-outline-primary btn-sm"
                             href="@CmsRoutes.Combine(sub.Slug)"
                             Match="NavLinkMatch.Prefix">
                        @sub.Name
                    </NavLink>
                </li>
            }
        </ul>
    }

    @if (primaryPost != null)
    {
        <article class="mb-4">
            <h5>
                <NavLink href="@CmsRoutes.Combine(Slug, primaryPost.Slug)" Match="NavLinkMatch.Prefix">
                    @primaryPost.Title
                </NavLink>
            </h5>
            <small class="text-muted">@primaryPost.PublishedAt?.ToString("f")</small>
            <p>MCE01</p>
            <div class="mt-3 mce-content-body">
                @((MarkupString)GetFirstParagraph(primaryPost.Html))
            </div>
        </article>
    }

    <h4>Articles</h4>
    @if (!otherPosts.Any())
    {
        <p>MCE04</p>
        <p><em>No published articles in this category.</em></p>
    }
    else
    {
        <ul class="list-unstyled">
            @foreach (var p in otherPosts)
            {
                <li class="mb-2">
                    <NavLink href="@CmsRoutes.Combine(Slug, p.Slug)" Match="NavLinkMatch.Prefix">
                        <strong>@p.Title</strong>
                    </NavLink>
                    <small class="text-muted ms-2">@p.PublishedAt?.ToString("g")</small>
                </li>
            }
        </ul>
    }
}

@code {
    [Parameter] public string Slug { get; set; } = string.Empty;
    [Parameter] public string? Tenant { get; set; }

    private CategoryDto? category;
    private List<CategoryDto> subcats = new();
    private PublicationReadDto? primaryPost;
    private List<PublicationReadDto> otherPosts = new();

    protected override async Task OnParametersSetAsync()
    {
        var allCats = await CategoryService.ListAsync();
        category = allCats.FirstOrDefault(c => c.Slug == Slug);
        if (category == null)
            return;

        subcats = allCats
            .Where(c => c.ParentCategoryId == category.Id)
            .ToList();

        var all = (await PublicationService.ListAsync())
                    .Where(p => p.CategoryId == category.Id
                                && p.Status == "Published")
                    .OrderBy(p => p.FeaturedOrder == 0 ? int.MaxValue : p.FeaturedOrder)
                    .ThenByDescending(p => p.PublishedAt ?? DateTimeOffset.MinValue)
                    .ToList();

        primaryPost = all.FirstOrDefault();
        otherPosts = all.Skip(1).ToList();
    }

    private string GetFirstParagraph(string html)
    {
        if (string.IsNullOrEmpty(html))
            return string.Empty;

        var end = html.IndexOf("</p>", StringComparison.OrdinalIgnoreCase);
        if (end != -1)
            return html.Substring(0, end + 4);

        return html;
    }
}
