@page "/dashboard"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inherits BlazorWebApp.Components.Shared.LocalizedComponentBase
@inject Microsoft.Extensions.Localization.IStringLocalizer<Dashboard> L

@using MudBlazor

<PageTitle>@L["Dashboard"]</PageTitle>

@using Microsoft.AspNetCore.Identity
@using BlazorWebApp.Data
@using BlazorWebApp.Models
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthStateProvider
@inject BlazorWebApp.Services.ICommentService CommentService

<h1>@L["Dashboard"]</h1>

@if (userName is null)
{
    <p>@L["Loading…"]</p>
}
else
{
    <p>@string.Format(L["WelcomeUser"], userName, userRole)</p>

    @if (comments == null)
    {
        <p>@L["Loading…"]</p>
    }
    else if (comments.Count == 0)
    {
        <p><em>@L["No comments yet"]</em></p>
    }
    else
    {
        <h5 class="mt-4">@L["Comments"]</h5>
        <MudList T="CommentDto" Dense="true">
            @foreach (var c in comments)
            {
                <MudListItem T="CommentDto" Class="d-flex align-items-center">
                    <MudCheckBox T="bool" @bind-Checked="c.IsRead" OnChanged="async _ => await ToggleReadAsync(c)" />
                    <span class="ms-2">@c.CreatedAt.ToString("g"): @c.Text</span>
                </MudListItem>
            }
        </MudList>
    }

}

@code {
    private string? userName;
    private string? userRole;
    private List<CommentDto>? comments;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        if (user != null)
        {
            userName = user.Email;
            var roles = await UserManager.GetRolesAsync(user);
            userRole = roles.FirstOrDefault() ?? "Member";
        }

        comments = await CommentService.ListAsync();
    }

    private async Task ToggleReadAsync(CommentDto comment)
    {
        await CommentService.SetReadStatusAsync(comment.Id, comment.IsRead);
    }
}
