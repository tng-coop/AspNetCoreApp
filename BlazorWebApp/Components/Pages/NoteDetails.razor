@page "/notes/{Id:guid}"
@using System.Security.Claims
@using BlazorWebApp.Models
@using Microsoft.AspNetCore.Components.Forms
@using BlazorWebApp.Services
@using BlazorWebApp.Data 
@inject INoteService NoteService
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider

@if (_note is null)
{
    <p><em>Note not found.</em></p>
}
else if (_isEditing)
{
    <EditForm Model="editDto" OnValidSubmit="SaveEdit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Title</label>
            <InputText class="form-control" @bind-Value="editDto.Title" />
            <ValidationMessage For="@(() => editDto.Title)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Content</label>
            <InputTextArea class="form-control" rows="5" @bind-Value="editDto.Content" />
            <ValidationMessage For="@(() => editDto.Content)" />
        </div>

        <div class="form-check mb-3">
            <InputCheckbox class="form-check-input" @bind-Value="editDto.IsPublic" />
            <label class="form-check-label">Public?</label>
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancel</button>
    </EditForm>
}
else
{
    <h1>@_note.Title</h1>
    <article>@((MarkupString)_note.Content)</article>
    <p><small>Created: @_note.CreatedAt.ToLocalTime():f</small></p>

    @if (_canEdit)
    {
        <button class="btn btn-secondary" @onclick="BeginEdit">Edit</button>
    }
}

@code {
    [Parameter] public Guid Id { get; set; }

    private Note?         _note;
    private NoteWriteDto  editDto    = new();
    private bool          _isEditing;
    private bool          _canEdit;
    private string?       _ownerId;

    protected override async Task OnInitializedAsync()
    {
        // get current user id & roles
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        _ownerId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    }

    protected override async Task OnParametersSetAsync()
    {
        _note = await NoteService.GetNoteAsync(Id, _ownerId);
        if (_note is null)
        {
            Nav.NavigateTo("/notes");
            return;
        }

        // only the owner or an admin can edit
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        var isAdmin = user.IsInRole("Admin");
        _canEdit = _note.OwnerId == _ownerId || isAdmin;

        // prep the DTO for editing
        if (_canEdit)
        {
            editDto.Title    = _note.Title;
            editDto.Content  = _note.Content;
            editDto.IsPublic = _note.IsPublic;
        }
    }

    private void BeginEdit()
        => _isEditing = true;

    private async Task SaveEdit()
    {
        await NoteService.UpdateNoteAsync(Id, editDto.Title, editDto.Content, editDto.IsPublic);
        _isEditing = false;

        // reload so we see any computed changes (timestamps, etc)
        _note = await NoteService.GetNoteAsync(Id, _ownerId);
    }

    private void CancelEdit()
    {
        _isEditing = false;
        // revert DTO
        if (_note != null)
        {
            editDto.Title    = _note.Title;
            editDto.Content  = _note.Content;
            editDto.IsPublic = _note.IsPublic;
        }
    }
}
