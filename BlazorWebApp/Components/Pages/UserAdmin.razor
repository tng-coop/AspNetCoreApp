@page "/_cms/_users"
@page "/{Tenant}/_cms/_users"
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = "Admin")]
@inherits BlazorWebApp.Components.Shared.LocalizedComponentBase
@inject Microsoft.Extensions.Localization.IStringLocalizer<UserAdmin> L

<PageTitle>@L["User Administration"]</PageTitle>

@using Microsoft.AspNetCore.Identity
@using BlazorWebApp.Data
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager

<h1>@L["User Administration"]</h1>

@if (users is null)
{
    <p>@L["Loading usersâ€¦"]</p>
}
else if (users.Count == 0)
{
    <p>@L["No users found."]</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>@L["Email"]</th>
                <th>@L["Role"]</th>
                <th>@L["Status"]</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        @foreach (var row in users)
        {
            <tr>
                <td>@row.Email</td>
                <td>
                    <InputSelect @bind-Value="row.Role" class="form-select" @onchange="() => ChangeRoleAsync(row)">
                        @foreach (var role in allRoles)
                        {
                            <option value="@role">@role</option>
                        }
                    </InputSelect>
                </td>
                <td>@(row.Disabled ? L["Disabled"].Value : L["Active"].Value)</td>
                <td>
                    <button class="btn btn-sm @(row.Disabled ? "btn-success" : "btn-warning")" @onclick="() => ToggleDisabledAsync(row)">
                        @(row.Disabled ? L["Enable"].Value : L["Disable"].Value)
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    [Parameter] public string? Tenant { get; set; }

    private List<UserRow>? users;
    private List<string>? allRoles;

    private class UserRow
    {
        public string Id { get; set; } = string.Empty;
        public string? Email { get; set; }
        public string Role { get; set; } = "";
        public bool Disabled { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        allRoles = RoleManager.Roles.Select(r => r.Name!).ToList();
        users = new List<UserRow>();
        foreach (var u in UserManager.Users.ToList())
        {
            var roles = await UserManager.GetRolesAsync(u);
            users.Add(new UserRow
            {
                Id = u.Id,
                Email = u.Email,
                Role = roles.FirstOrDefault() ?? "Member",
                Disabled = await UserManager.IsLockedOutAsync(u)
            });
        }
    }

    private async Task ToggleDisabledAsync(UserRow row)
    {
        var user = await UserManager.FindByIdAsync(row.Id);
        if (user == null)
            return;

        if (row.Disabled)
        {
            await UserManager.SetLockoutEndDateAsync(user, null);
            row.Disabled = false;
        }
        else
        {
            await UserManager.SetLockoutEndDateAsync(user, DateTimeOffset.MaxValue);
            row.Disabled = true;
        }
    }

    private async Task ChangeRoleAsync(UserRow row)
    {
        var user = await UserManager.FindByIdAsync(row.Id);
        if (user == null)
            return;

        var currentRoles = await UserManager.GetRolesAsync(user);
        foreach (var r in currentRoles)
            await UserManager.RemoveFromRoleAsync(user, r);

        await UserManager.AddToRoleAsync(user, row.Role);
    }
}
