@page "/publications/{Id:guid}"
@using TinyMCE.Blazor
@using BlazorWebApp.Models
@using BlazorWebApp.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject IPublicationService PublicationService
@inject ICategoryService CategoryService

@if (pub == null)
{
    <p><em>Publication not found.</em></p>
}
else
{
    <h1>@pub.Title</h1>

    @if (!string.IsNullOrEmpty(fullCategoryPath))
    {
        <p class="text-muted mb-4">
            <small>Category: @fullCategoryPath</small>
        </p>
    }

    <!-- TinyMCE in read-only mode -->
    <TinyMCE.Blazor.Editor
        ApiKey="no-api-key"
        Value="@pub.Html"
        Readonly="true"
        Conf="@readOnlyConfig" />

    <p><small>Created: @pub.CreatedAt:f</small></p>

    @if (pub.PublishedAt.HasValue)
    {
        <p><small>Published: @pub.PublishedAt.Value:f</small></p>
    }

    <AuthorizeView Roles="Admin">
        <div class="mt-3">
            <button class="btn btn-secondary" @onclick="SetAsDraft">
                Set as Draft
            </button>
        </div>
    </AuthorizeView>
}

@code {
    [Parameter] public Guid Id { get; set; }

    private PublicationReadDto? pub;
    private string fullCategoryPath = string.Empty;

    // pull the read-only Editor config into a field so Razor parsing isn't confused by quotes
    private readonly Dictionary<string, object> readOnlyConfig = new()
    {
        ["menubar"]   = false,
        ["toolbar"]   = false,
        ["statusbar"] = false,
        ["height"]    = 400
    };

    protected override async Task OnParametersSetAsync()
    {
        pub = await PublicationService.GetAsync(Id);

        if (pub?.CategoryId != null)
        {
            var ancestry = await CategoryService.GetAncestryAsync(pub.CategoryId.Value);
            var crumbs = ancestry
                          .Select(c => c.Name)
                          .Append(pub.CategoryName!)
                          .ToList();
            fullCategoryPath = string.Join(" > ", crumbs);
        }
    }

    private async Task SetAsDraft()
    {
        if (pub == null) return;

        await PublicationService.UnpublishAsync(pub.Id);

        // refresh so dates/status update
        pub = await PublicationService.GetAsync(pub.Id);
        StateHasChanged();
    }
}
