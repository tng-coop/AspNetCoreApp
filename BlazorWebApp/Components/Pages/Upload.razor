@page "/upload"
@rendermode InteractiveServer
@attribute [Authorize]

@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Headers
@using System.Security.Claims

@inject JwtTokenService                JwtService
@inject AuthenticationStateProvider    AuthenticationStateProvider
@inject IHttpClientFactory             HttpClientFactory
@inject IConfiguration                 Configuration

<h3>Upload File</h3>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert alert-info">@Message</div>
}

<div class="mb-3">
    <InputFile OnChange="HandleFileSelected" class="form-control" />
</div>
<button class="btn btn-primary" @onclick="UploadFileAsync">Upload</button>

@code {
    private IBrowserFile? uploadFile;
    private string Message = "";

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadFile = e.File;
        Message = "";
    }

    private async Task UploadFileAsync()
    {
        if (uploadFile == null)
        {
            Message = "Please select a file to upload.";
            return;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated ?? true)
        {
            Message = "User is not authenticated.";
            return;
        }

        var realName = user.Identity?.Name ?? "unknown";
        var email    = user.FindFirst(ClaimTypes.Email)?.Value ?? "unknown@example.com";

        // generate JWT
        var client = HttpClientFactory.CreateClient();
        var token  = JwtService.GenerateToken(realName, email);
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        // prepare multipart content
        using var content = new MultipartFormDataContent();
        await using var ms = new MemoryStream();
        await uploadFile.OpenReadStream(uploadFile.Size).CopyToAsync(ms);
        ms.Position = 0;
        var fileContent = new StreamContent(ms);
        fileContent.Headers.ContentType = new MediaTypeHeaderValue(uploadFile.ContentType);
        content.Add(fileContent, "file", uploadFile.Name);

        // read the upload URL from configuration
        var uploadUrl = Configuration["UploadSettings:Endpoint"]
                     ?? throw new InvalidOperationException("UploadSettings:Endpoint not set in configuration");

        var response = await client.PostAsync(uploadUrl, content);

        if (response.IsSuccessStatusCode)
        {
            Message = await response.Content.ReadAsStringAsync();
        }
        else
        {
            Message = $"Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
        }
    }
}
