@page "/upload"
@rendermode InteractiveServer
@attribute [Authorize]
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Headers
@inject JwtTokenService JwtService

<h3>Upload File</h3>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert alert-info">@Message</div>
}

<div class="mb-3">
    <InputFile OnChange="HandleFileSelected" class="form-control" />
</div>
<button class="btn btn-primary" @onclick="UploadFileAsync">Upload</button>

@code {
    [Inject]
    private IHttpClientFactory HttpClientFactory { get; set; } = default!;

    private IBrowserFile? uploadFile;
    private string Message = "";

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadFile = e.File;
        Message = "";
    }

private async Task UploadFileAsync()
{
    if (uploadFile == null)
    {
        Message = "Please select a file to upload.";
        return;
    }

    var client = HttpClientFactory.CreateClient();

    var token = JwtService.GenerateToken("user123", "user@example.com");
    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

    using var content = new MultipartFormDataContent();
    
    // Use a memory stream to ensure file is fully accessible during upload
    await using var memoryStream = new MemoryStream();
    await uploadFile.OpenReadStream(uploadFile.Size).CopyToAsync(memoryStream);
    memoryStream.Position = 0; // Reset stream position to beginning

    var fileContent = new StreamContent(memoryStream);
    fileContent.Headers.ContentType = new MediaTypeHeaderValue(uploadFile.ContentType);
    content.Add(fileContent, "file", uploadFile.Name);

    var request = new HttpRequestMessage(HttpMethod.Post, "https://tng.coop/photos/a.php")
    {
        Content = content
    };

    var response = await client.SendAsync(request);

    if (response.IsSuccessStatusCode)
    {
        Message = await response.Content.ReadAsStringAsync();
    }
    else
    {
        Message = $"Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
    }
}

}