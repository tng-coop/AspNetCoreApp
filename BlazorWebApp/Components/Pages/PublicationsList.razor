@page "/_cms/_publications"
@page "/{Tenant}/_cms/_publications"
@using BlazorWebApp.Models
@using BlazorWebApp.Services
@using BlazorWebApp.Utils
@inject IPublicationService PublicationService
@inject ICategoryService    CategoryService
@inherits BlazorWebApp.Components.Shared.LocalizedComponentBase
@inject Microsoft.Extensions.Localization.IStringLocalizer<PublicationsList> L

<AuthorizeView>
  <Authorized>
    <p class="mb-4">
      ðŸ‘‹ @L["Hello"], <strong>@context.User.Identity!.Name</strong>!
    </p>
  </Authorized>
  <NotAuthorized>
    <p class="mb-4 text-warning">@L["Youâ€™re not logged in."]</p>
  </NotAuthorized>
</AuthorizeView>

<h3>@L["Drafts"]</h3>
<ul class="list-unstyled">
    @foreach (var p in draftPubs)
    {
        <li>
            <a href="/_cms/_editor/@p.Id"><strong>@PublicationUtils.LocalizedTitle(p)</strong></a>
            <small class="text-muted ms-2">@p.CreatedAt:g</small>
            @if (!string.IsNullOrEmpty(GetCategoryPath(p)))
            {
                <small class="text-muted ms-2">(@GetCategoryPath(p))</small>
            }
        </li>
    }
</ul>

<h3>@L["Published"]</h3>
<ul class="list-unstyled">
    @foreach (var p in publishedPubs)
    {
        <li>
            <a href="/_cms/@GetCatSlug(p)/@p.Slug"><strong>@PublicationUtils.LocalizedTitle(p)</strong></a>
            <small class="text-muted ms-2">@p.PublishedAt!.Value:g</small>
            @if (!string.IsNullOrEmpty(GetCategoryPath(p)))
            {
                <small class="text-muted ms-2">(@GetCategoryPath(p))</small>
            }
        </li>
    }
</ul>

@code {
    [Parameter] public string? Tenant { get; set; }
    private List<PublicationReadDto> draftPubs = new();
    private List<PublicationReadDto> publishedPubs = new();
    private Dictionary<Guid, string> _categoryPaths = new();
    private Dictionary<Guid, string> _categorySlugs = new();

    protected override async Task OnInitializedAsync()
    {
        var pubs = await PublicationService.ListAsync();
        var categories = await CategoryService.ListAsync();

        // Build full category paths
        foreach (var p in pubs.Where(x => x.CategoryId.HasValue))
        {
            var ancestry = p.CategoryId.HasValue
                ? await CategoryService.GetAncestryAsync(p.CategoryId.Value)
                : new List<CategoryDto>();
            var crumbs = ancestry.Select(CategoryUtils.LocalizedName)
                                 .Append(p.CategoryName!)
                                 .ToList();
            _categoryPaths[p.Id] = string.Join(" > ", crumbs);
            var categoryId = p.CategoryId ?? throw new InvalidOperationException("CategoryId cannot be null");
            var catSlug = categories.FirstOrDefault(c => c.Id == categoryId)?.Slug;
            if (!string.IsNullOrEmpty(catSlug))
                _categorySlugs[p.Id] = catSlug;
        }

        // Sort and split by status
        draftPubs = pubs
            .Where(p => p.Status == "Draft")
            .OrderBy(p => GetCategoryPath(p))
            .ThenBy(p => p.CreatedAt)
            .ToList();

        publishedPubs = pubs
            .Where(p => p.Status == "Published")
            .OrderBy(p => GetCategoryPath(p))
            .ThenByDescending(p => p.PublishedAt)
            .ToList();
    }

    private string GetCategoryPath(PublicationReadDto p)
        => _categoryPaths.TryGetValue(p.Id, out var path) ? path : string.Empty;

    private string GetCatSlug(PublicationReadDto p)
        => _categorySlugs.TryGetValue(p.Id, out var slug) ? slug : string.Empty;
}
