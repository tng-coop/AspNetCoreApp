@page "/puzzle"
@rendermode InteractiveServer
@inject IConfiguration Configuration
@using System.Linq

<PageTitle>Fractal Puzzle (2×3 grid)</PageTitle>

<svg width="800" height="450" viewBox="0 0 800 450" xmlns="http://www.w3.org/2000/svg">
  <defs>
    @* emit one <path> + <clipPath> per piece *@
    @foreach (var p in _pieces)
    {
      <path id="@p.ShapeId" d="@p.PathData" />
      <clipPath id="@p.ClipId"><use href="#@p.ShapeId" /></clipPath>
    }
  </defs>

  <g id="puzzle">
    @* emit each piece in its row/col spot *@
    @foreach (var p in _pieces)
    {
      <g transform="translate(@p.TranslateX,@p.TranslateY)">
        <image
          href="@Url(p.Index)"
          x="@p.XOffset" y="@p.YOffset"
          width="250" height="200"
          preserveAspectRatio="@p.PreserveAspect"
          clip-path="url(#@p.ClipId)" />
        <use href="#@p.ShapeId" fill="none" stroke="#000" stroke-width="2" />
      </g>
    }
  </g>
</svg>

@code {
    private string _downloadEndpoint = "";
    private List<PuzzlePiece> _pieces = new();

    protected override void OnInitialized()
    {
        _downloadEndpoint = Configuration["DownloadSettings:Endpoint"]
            ?? throw new InvalidOperationException("DownloadSettings:Endpoint not configured");

        // just the two unique shape-paths and aspect-modes:
        var piecePaths = new[]
        {
            "M0,0 L120,20 Q140,40 120,60 L100,100 L20,80 Q-10,40 0,0 Z",
            "M0,10 L120,0 Q150,40 110,70 L20,90 Q-10,60 0,10 Z"
        };
        var aspects = new[]
        {
            "xMidYMid slice",
            "xMinYMid slice"
        };

        const int   columns   = 2;
        const double xSpacing  = 160;  // horizontal step
        const double ySpacing  = 120;  // vertical step

        _pieces = Enumerable.Range(0, 6)
            .Select(i =>
            {
                var row = i / columns;
                var col = i % columns;

                return new PuzzlePiece(
                    Index:          i + 1,
                    ShapeId:        $"shape{i+1}",
                    PathData:       piecePaths[i % piecePaths.Length],
                    TranslateX:     col * xSpacing + 30,
                    TranslateY:     row * ySpacing,
                    XOffset:        -30,
                    YOffset:        0,
                    PreserveAspect: aspects[i % aspects.Length]
                );
            })
            .ToList();
    }

    private string Url(int i)
        => $"{_downloadEndpoint}/colorful_{i}.png";

    private record PuzzlePiece(
        int    Index,
        string ShapeId,
        string PathData,
        double TranslateX,
        double TranslateY,
        int    XOffset,
        int    YOffset,
        string PreserveAspect
    )
    {
        public string ClipId => $"clip_{ShapeId}";
    }
}
